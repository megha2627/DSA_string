Given a string s, return the longest palindromicsubstring in s.

public class Solution {
    private int lo, max;
    public String longestPalindrome(String s) {
    int len=s.length();
    
        if(len<2){
            return s;
        }
        for(int i=0;i<s.length()-1;i++){
        palindrome(s,i,i);
        palindrome(s,i,i+1);
        }
        return s.substring(lo,lo+max);
    }
    private void palindrome(String s,int j,int k){
        while(j>=0 && k<s.length() && s.charAt(j)==s.charAt(k) ){
            j--;
            k++;
        }
        if(max<k-j-1){
            lo=j+1;
            max=k-j-1;
        }
    }
}

/*public String longestPalindrome(String s) {
	int len = s.length();
	if (len < 2)
		return s;
	
    for (int i = 0; i < len-1; i++) {
     	extendPalindrome(s, i, i);  //assume odd length, try to extend Palindrome as possible
     	extendPalindrome(s, i, i+1); //assume even length.
    }
    return s.substring(lo, lo + maxLen);
}

private void extendPalindrome(String s, int j, int k) {
	while (j >= 0 && k < s.length() && s.charAt(j) == s.charAt(k)) {
		j--;
		k++;
	}
	if (maxLen < k - j - 1) {
		lo = j + 1;
		maxLen = k - j - 1;
	}
}}*/